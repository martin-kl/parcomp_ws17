Wichtig für Quicksort - partition step müssen wir parallelisieren - siehe Beispiel nach mergesort in cilk Folien, da kommt was mit exscan zum Quicksort

Folie mit Überschrift: Example task parallel prefix sums - wichtig für unser Projekt, wichtig: Daten in Hälfte zu teilen, 2x prefix Summe berechnen und weitergehen
Addieren danach ist einfach Daten-parallel zu lösen
O(n) sequentiell
Parallel: problem, zu viel Arbeit
(siehe Foto für Aufwand von O(n log n) bei parallelem Quicksort in Slack von 7.12.)



Foliennummern für Algorithmen usw:

Algorithmus für Quicksort and mergesort - für das partition mit prefix summen:
04_ParComp-OpenMP.pdf - 381 von 393

dabei fehlt dann noch der Exscan
zu Exscan:
  03_ParComp-HPC-Prefix-sums - Folie 77-79 von 149 zu Quicksort mit parallelen partition
  interessant für Cilk scan: 04_ParComp Folie 369-373 
    brauchen wir immer wenn wir datenparallele Schleifen mit Cilk parallelisieren wollen!

  Algorithmen dafür dann von 83 - 134
    Vielleicht 127 + der davor interessant, da steht dass wir den verwenden sollen wenn blocking applicable ist!!
    Achtung: 3. Version (Doubling prefix-sums algorithm) ist NICHT arbeitsoptimal!!




Anmerkungen aus den Vorlesungen (Folien) zu den einzelnen Paradigmen:

Wichtig für CILK:
  wenn man das Programm kompiliert mit gcc -DSEQUENTIAL sollte das Programm sequentiell ablaufen (siehe Folie 363 von 393 in 04_ParComp-OpenMP)


MPI:
  Mpi_comm_split is wichtig für zum beispiel pivot broadcasten, alle Prozesse die dabei die selbe Farbe haben kommen in einen Kommunikator, wenn key für alle gleich ist bleiben die ranks so wie bisher  




Allgemein (für alle 3 Paradigmen):

  rekursiv nie bis ganz runter gehen, also Beispiel Quicksort in cilk auf Folien mit seinen Nummern hat er nur bis n=1000 rekursiv gemacht und sonst umgeschaltet auf iterativen Quicksort

  Unit (von Foto 7.12. Slack - Baum aufbauen, ab UNIT dann sequentiell lösen - dabei haben in einer stufe alle das selbe Pivot Element) muss als Omega(log n) gewählt werden für den scan der aus 2 Schritten besteht mit preparescan und finishscan 

  Anmerkung zu aktueller Wahl des Privots (aktulle Wahl: erstes element) - wenn die zahlen aufsteigend/absteigend sortiert sind (bei cilkqsort parameter -s 2) schafft das auf meinem pc nichtmal 1 000 000 zahlen weil er immer rekursiv weitergeht
